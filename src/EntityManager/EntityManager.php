<?php

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

namespace Monorm\EntityManager;

use Monorm\DataManager\DataManager;
use Monorm\Entity\Entity;
use Monorm\Hydrator\Hydrator;
use Monorm\RowData\RowData;

/**
 * Description of EntityManager
 *
 * @author pes2704
 */
class EntityManager {

    private $oldEntities = [];
    private $newEntities = [];
    private $newAutogenEntities = [];
    private $removedEntities = [];
    private $dataManager;

    private $idForAutogeneratedIdentity = 0;
    private $flushed;

    public function __construct(DataManager $dataManager) {
        $this->dataManager = $dataManager;
    }

    public function get($identity) {
        $data = $this->dataManager->get($identity);
        if (isset($data)) {
            $entity = $this->hydrate(new Entity($identity), $data);
            $this->oldEntities[$identity] = $entity;
        }
        return $entity ?? NULL;
    }

    public function persist(Entity $entity) {
        $identity = $entity->getIdentity();
        if(isset($identity)) {
            $this->newEntities[$identity] = $entity;
        } else {
            $entity->setIdentity($this->idForAutogeneratedIdentity);
            $this->newAutogenEntities[$this->idForAutogeneratedIdentity++] = $entity;
        }
    }

    public function unpersist(Entity $entity) {
    $identity = $entity->getIdentity();
        if (isset($this->oldEntities[$identity])) {
            $this->removedEntities[$identity] = $this->oldEntities[$identity];
            unset($this->oldEntities[$identity]);
        }
        if (isset($this->newEntities[$identity])) {
            unset($this->newEntities[$identity]);
        }
    }

    private function hydrate(Entity $entity) {
        $index = $entity->getIdentity();
        if (!isset($this->oldEntities[$index])) {
            $hydrator = new Hydrator();
            $hydrator->hydrate($entity, $this->dataManager->get($index));
            $this->oldEntities[$index] = $entity;
        } else {
            throw new LogicException("Pokus o hydratování entity, která již byla hydratována při dřívějším čtení dat z úložiště.");
        }
        return $this->oldEntities[$index];
    }

    public function flush() {
            $hydrator = new Hydrator();
            if ($this->oldEntities) {
                foreach ($this->oldEntities as $index => $entity) {
                    $data = $this->dataManager->get($index);
                    $hydrator->extract($entity, $data);
                }
            }
            if ($this->newEntities) {
                foreach ($this->newEntities as $index => $entity) {
                    $data = new RowData();  // tady není třeba big data
                    $hydrator->extract($entity, $data);
                    $this->dataManager->set($index, $data);
                    $this->oldEntities[$index] = $entity;
                }
            }
            if ($this->removedEntities) {
                foreach ($this->removedEntities as $index => $entity) {
                    $this->dataManager->unset($index);
                }
            }
            $this->removedEntities = [];
            $this->newEntities = [];  // v případě opakování flush() se budou insertovat jen další nové entity
            $this->dataManager->flush();
    }

    public function __destruct() {
        $this->flush();
    }
}

